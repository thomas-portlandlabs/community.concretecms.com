# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type Backup implements Node {
    _id: String!
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    downloadUrl: String
    environmentName: String!
    fulfillmentStatus: String!
    group: String!
    id: ID!
    project: HostingProject
    restores(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        group: String,
        group_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [RestoreFilter_order],
        project: String,
        project_list: [String]
    ): RestoreConnection
    status: String!
    taskId: Int
    taskType: String!
    "How many seconds this backup will be valid, default to 1 hour"
    ttl: Int!
}

"Connection for Backup."
type BackupConnection {
    edges: [BackupEdge]
    pageInfo: BackupPageInfo!
    totalCount: Int!
}

"Edge of Backup."
type BackupEdge {
    cursor: String!
    node: Backup
}

"Information about the current page."
type BackupPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type ConcreteRelease implements Node {
    _id: Int!
    dateReleased: String!
    downloadUrl: String
    id: ID!
    isPublished: Boolean!
    md5sum: String!
    releaseNotes: String
    releaseNotesUrl: String
    upgradeNotes: String
    version: String!
}

"Connection for ConcreteRelease."
type ConcreteReleaseConnection {
    edges: [ConcreteReleaseEdge]
    pageInfo: ConcreteReleasePageInfo!
    totalCount: Int!
}

"Edge of ConcreteRelease."
type ConcreteReleaseEdge {
    cursor: String!
    node: ConcreteRelease
}

"Information about the current page."
type ConcreteReleasePageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Deploy implements Node {
    _id: String!
    commit: String!
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    deployName: String!
    environmentName: String!
    fulfillmentStatus: String!
    id: ID!
    project: HostingProject
}

"Connection for Deploy."
type DeployConnection {
    edges: [DeployEdge]
    pageInfo: DeployPageInfo!
    totalCount: Int!
}

"Edge of Deploy."
type DeployEdge {
    cursor: String!
    node: Deploy
}

"Information about the current page."
type DeployPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Deployment implements Node {
    _id: Int!
    dateCompleted: String
    dateCreated: String!
    dateStarted: String
    id: ID!
    name: String!
    remoteId: String!
    status: String!
    uiLink: String!
}

type Environment implements Node {
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    environmentName: String!
    environmentType: String!
    fulfillmentStatus: String!
    id: ID!
    lagoonId: Int
    project: HostingProject!
    route: String!
    routes: Iterable!
    services: Iterable!
}

"Connection for Environment."
type EnvironmentConnection {
    edges: [EnvironmentEdge]
    pageInfo: EnvironmentPageInfo!
    totalCount: Int!
}

"Edge of Environment."
type EnvironmentEdge {
    cursor: String!
    node: Environment
}

"Information about the current page."
type EnvironmentPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

"Make sure to update the matchClass method as well when adding to the discriminator map!"
type EnvironmentTask implements Node {
    _id: String!
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    environmentName: String!
    fulfillmentStatus: String!
    group: String!
    id: ID!
    project: HostingProject
    status: String!
    taskId: Int
    taskType: String!
}

"Connection for EnvironmentTask."
type EnvironmentTaskConnection {
    edges: [EnvironmentTaskEdge]
    pageInfo: EnvironmentTaskPageInfo!
    totalCount: Int!
}

"Edge of EnvironmentTask."
type EnvironmentTaskEdge {
    cursor: String!
    node: EnvironmentTask
}

"Information about the current page."
type EnvironmentTaskPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type HostingProject implements Node {
    _id: Int!
    authorizedAdmins: Iterable
    authorizedUsers: Iterable
    branches: Iterable!
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    deploys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [DeployFilter_order],
        project: String,
        project_list: [String]
    ): DeployConnection
    developmentEnvironmentsLimit: Int!
    environments(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [EnvironmentFilter_order],
        project: String,
        project_list: [String]
    ): EnvironmentConnection
    fulfillmentStatus: String!
    gitPath: String!
    gitUrl: String!
    id: ID!
    lagoonId: Int
    lagoonName: String!
    lagoonProject: LagoonProject
    name: String!
    productionBranch: String!
    projectType: String!
    startingPoint: StartingPoint!
    tasks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        group: String,
        group_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [EnvironmentTaskFilter_order],
        project: String,
        project_list: [String]
    ): EnvironmentTaskConnection
}

"Connection for HostingProject."
type HostingProjectConnection {
    edges: [HostingProjectEdge]
    pageInfo: HostingProjectPageInfo!
    totalCount: Int!
}

"Edge of HostingProject."
type HostingProjectEdge {
    cursor: String!
    node: HostingProject
}

"Information about the current page."
type HostingProjectPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Install implements Node {
    _id: String!
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    environmentName: String!
    fulfillmentStatus: String!
    group: String!
    id: ID!
    project: HostingProject
    status: String!
    taskId: Int
    taskType: String!
}

type LagoonProject implements Node {
    _id: Int!
    autoIdle: Int!
    availability: String!
    branches: String!
    created: String
    developmentEnvironmentsLimit: Int!
    environments: Iterable!
    gitUrl: String!
    id: ID!
    kubernetes: String!
    kubernetesNamespacePattern: String!
    metadata: Iterable!
    name: String!
    productionAlias: String!
    productionEnvironment: String!
    productionRoutes: String!
    pullrequests: String!
    standbyAlias: String!
    standbyProductionEnvironment: String!
    standbyRoutes: String!
    storageCalc: Int!
    subfolder: String!
}

type Mutation {
    "Cancels a Deployment."
    cancelDeployment(input: cancelDeploymentInput!): cancelDeploymentPayload
    "Creates a Backup."
    createBackup(input: createBackupInput!): createBackupPayload
    "Creates a Deploy."
    createDeploy(input: createDeployInput!): createDeployPayload
    "Creates a Environment."
    createEnvironment(input: createEnvironmentInput!): createEnvironmentPayload
    "Creates a EnvironmentTask."
    createEnvironmentTask(input: createEnvironmentTaskInput!): createEnvironmentTaskPayload
    "Creates a HostingProject."
    createHostingProject(input: createHostingProjectInput!): createHostingProjectPayload
    "Creates a Install."
    createInstall(input: createInstallInput!): createInstallPayload
    "Creates a Restore."
    createRestore(input: createRestoreInput!): createRestorePayload
    "Creates a StartingPoint."
    createStartingPoint(input: createStartingPointInput!): createStartingPointPayload
    "Deletes a Environment."
    deleteEnvironment(input: deleteEnvironmentInput!): deleteEnvironmentPayload
    "Deletes a StartingPoint."
    deleteStartingPoint(input: deleteStartingPointInput!): deleteStartingPointPayload
    "Updates a ConcreteRelease."
    updateConcreteRelease(input: updateConcreteReleaseInput!): updateConcreteReleasePayload
    "Updates a Environment."
    updateEnvironment(input: updateEnvironmentInput!): updateEnvironmentPayload
    "Updates a HostingProject."
    updateHostingProject(input: updateHostingProjectInput!): updateHostingProjectPayload
    "Updates a StartingPoint."
    updateStartingPoint(input: updateStartingPointInput!): updateStartingPointPayload
}

type Query {
    backup(id: ID!): Backup
    backups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        group: String,
        group_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [BackupFilter_order],
        project: String,
        project_list: [String]
    ): BackupConnection
    concreteRelease(id: ID!): ConcreteRelease
    concreteReleases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        order: [ConcreteReleaseFilter_order]
    ): ConcreteReleaseConnection
    currentSession: Session
    deploy(id: ID!): Deploy
    deploys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [DeployFilter_order],
        project: String,
        project_list: [String]
    ): DeployConnection
    environment(id: ID!): Environment
    environmentTask(id: ID!): EnvironmentTask
    environmentTasks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        group: String,
        group_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [EnvironmentTaskFilter_order],
        project: String,
        project_list: [String]
    ): EnvironmentTaskConnection
    environments(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [EnvironmentFilter_order],
        project: String,
        project_list: [String]
    ): EnvironmentConnection
    hostingProject(id: ID!): HostingProject
    hostingProjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        id: Int,
        id_list: [Int],
        "Returns the last n elements from the list."
        last: Int,
        name: String,
        order: [HostingProjectFilter_order]
    ): HostingProjectConnection
    install(id: ID!): Install
    node(id: ID!): Node
    restore(id: ID!): Restore
    restores(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        environmentName: String,
        environmentName_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        fulfillmentStatus: String,
        fulfillmentStatus_list: [String],
        group: String,
        group_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        order: [RestoreFilter_order],
        project: String,
        project_list: [String]
    ): RestoreConnection
    session(id: ID!): Session
    startingPoint(id: ID!): StartingPoint
    startingPoints: [StartingPoint]
}

type Restore implements Node {
    _id: String!
    backup: Backup
    dateCreated: String!
    dateFulfilled: String
    dateStarted: String
    dateUpdated: String!
    environmentName: String!
    fulfillmentStatus: String!
    group: String!
    id: ID!
    project: HostingProject
    status: String!
    taskId: Int
    taskType: String!
}

"Connection for Restore."
type RestoreConnection {
    edges: [RestoreEdge]
    pageInfo: RestorePageInfo!
    totalCount: Int!
}

"Edge of Restore."
type RestoreEdge {
    cursor: String!
    node: Restore
}

"Information about the current page."
type RestorePageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Session implements Node {
    _id: String!
    email: String!
    id: ID!
    roles: Iterable!
    username: String!
}

type StartingPoint implements Node {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String!
    dateCreated: String!
    dateUpdated: String!
    handle: String!
    id: ID!
    "The human readable name for this starting point"
    name: String!
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String!
}

type Subscription {
    "Subscribes to the update event of a Environment."
    updateEnvironmentSubscribe(input: updateEnvironmentSubscriptionInput!): updateEnvironmentSubscriptionPayload
    "Subscribes to the update event of a HostingProject."
    updateHostingProjectSubscribe(input: updateHostingProjectSubscriptionInput!): updateHostingProjectSubscriptionPayload
}

type cancelDeploymentPayload {
    clientMutationId: String
    deployment: Deployment
}

type createBackupPayload {
    backup: Backup
    clientMutationId: String
}

type createDeployPayload {
    clientMutationId: String
    deploy: Deploy
}

type createEnvironmentPayload {
    clientMutationId: String
    environment: Environment
}

"Make sure to update the matchClass method as well when adding to the discriminator map!"
type createEnvironmentTaskPayload {
    clientMutationId: String
    environmentTask: EnvironmentTask
}

type createHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type createInstallPayload {
    clientMutationId: String
    install: Install
}

type createRestorePayload {
    clientMutationId: String
    restore: Restore
}

type createStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

type deleteEnvironmentPayload {
    clientMutationId: String
    environment: Environment
}

type deleteStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

type updateConcreteReleasePayload {
    clientMutationId: String
    concreteRelease: ConcreteRelease
}

type updateEnvironmentPayload {
    clientMutationId: String
    environment: Environment
}

type updateEnvironmentSubscriptionPayload {
    clientSubscriptionId: String
    environment: Environment
    mercureUrl: String
}

type updateHostingProjectPayload {
    clientMutationId: String
    hostingProject: HostingProject
}

type updateHostingProjectSubscriptionPayload {
    clientSubscriptionId: String
    hostingProject: HostingProject
    mercureUrl: String
}

type updateStartingPointPayload {
    clientMutationId: String
    startingPoint: StartingPoint
}

input BackupFilter_order {
    dateCreated: String
}

input ConcreteReleaseFilter_order {
    dateReleased: String
    id: String
}

input DeployFilter_order {
    dateCreated: String
}

input EnvironmentFilter_order {
    dateCreated: String
}

input EnvironmentTaskFilter_order {
    dateCreated: String
}

input HostingProjectFilter_order {
    dateCreated: String
    id: String
    name: String
}

input RestoreFilter_order {
    dateCreated: String
}

input cancelDeploymentInput {
    _id: Int!
    apiClient: String!
    clientMutationId: String
    dateCompleted: String
    dateCreated: String!
    dateStarted: String
    id: ID!
    name: String!
    remoteId: String!
    status: String!
    uiLink: String!
}

input createBackupInput {
    clientMutationId: String
    environmentName: String!
    project: String
    restores: [String]
}

input createDeployInput {
    clientMutationId: String
    environmentName: String!
    project: String
}

input createEnvironmentInput {
    clientMutationId: String
    environmentName: String!
    environmentType: String!
    project: String!
}

"Make sure to update the matchClass method as well when adding to the discriminator map!"
input createEnvironmentTaskInput {
    clientMutationId: String
    environmentName: String!
    project: String
}

input createHostingProjectInput {
    authorizedAdmins: Iterable
    authorizedUsers: Iterable
    clientMutationId: String
    name: String!
    productionBranch: String!
    startingPoint: String!
}

input createInstallInput {
    clientMutationId: String
    environmentName: String!
    project: String
}

input createRestoreInput {
    backup: String
    clientMutationId: String
    environmentName: String!
    project: String
}

input createStartingPointInput {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String!
    clientMutationId: String
    handle: String!
    "The human readable name for this starting point"
    name: String!
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String!
}

input deleteEnvironmentInput {
    clientMutationId: String
    id: ID!
}

input deleteStartingPointInput {
    clientMutationId: String
    id: ID!
}

input updateConcreteReleaseInput {
    clientMutationId: String
    dateReleased: String
    downloadUrl: String
    id: ID!
    isPublished: Boolean
    md5sum: String
    releaseNotes: String
    releaseNotesUrl: String
    upgradeNotes: String
    version: String
}

input updateEnvironmentInput {
    clientMutationId: String
    environmentName: String
    environmentType: String
    id: ID!
    project: String
}

input updateEnvironmentSubscriptionInput {
    clientSubscriptionId: String
    id: ID!
}

input updateHostingProjectInput {
    authorizedAdmins: Iterable
    authorizedUsers: Iterable
    clientMutationId: String
    id: ID!
    name: String
    productionBranch: String
    startingPoint: String
}

input updateHostingProjectSubscriptionInput {
    clientSubscriptionId: String
    id: ID!
}

input updateStartingPointInput {
    """

    The repository to base new projects with this starting point off of
    EX: git@github.com:concrete5/concrete5.git
    """
    baseRepository: String
    clientMutationId: String
    handle: String
    id: ID!
    "The human readable name for this starting point"
    name: String
    """

    The name of the starting point to use. We basically clone $baseRepository and run c5:install with this value
    provided for --starting-point
    """
    startingPoint: String
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
