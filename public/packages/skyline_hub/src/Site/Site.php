<?php

namespace PortlandLabs\Skyline\Site;

use HtmlObject\Element;
use Stripe\Invoice;
use Stripe\Stripe;
use Stripe\StripeClient;
use Stripe\Subscription;

class Site implements \JsonSerializable
{

    const STATUS_INSTALLING = 10;
    const STATUS_ACTIVE = 50;
    const STATUS_TRIAL_SUSPENDED = 80;
    const STATUS_USER_SUSPENDED = 90;

    const SUBSCRIPTION_STATUS_TRIALING = 'trialing';

    /**
     * Site UUID; derived from the Express public identifier.
     * @var string
     */
    protected $id;

    /**
     * @var int
     */
    protected $status;

    /**
     * Status of the underlying subscription object. Used so that we can filter lists by status easily. Updated
     * automatically on account create, stripe lifecycle change
     *
     * @var string
     */
    protected $subscriptionStatus;

    /**
     * @var \DateTime
     */
    protected $dateAdded;

    /**
     * @var int
     */
    protected $suspendedTimestamp;

    /**
     * @var string
     */
    protected $neighborhood;

    /**
     * Semi-autogenerated handle of the site. Matches the default domain for viewing/editing.
     * e.g. kettlfo-jcid7-iejfl
     *
     * @var string
     */
    protected $handle;

    /**
     * Public URL at which the site can be accessed.
     * @var string
     */
    protected $publicUrl;

    /**
     * The URL on community.concretecms.com where the billing can be modified, other functions accessed
     * @var string
     */
    protected $controlPanelUrl;

    /**
     * @var string
     */
    protected $name;

    /**
     * Domain to display on the site details page.
     * @var string
     */
    protected $publicDomain;

    /**
     * Stripe subscription ID
     * @var string
     */
    protected $subscriptionId;

    /**
     * Auto-generated password, temporarily available on the Site object during installation. Is cleared when
     * installation is complete.
     *
     * @var string
     */
    protected $concreteAdminPassword;

    /**
     * @return string
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @param string $id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }


    /**
     * @return string
     */
    public function getPublicUrl(): string
    {
        return $this->publicUrl;
    }

    /**
     * @param string $publicUrl
     */
    public function setPublicUrl(string $publicUrl): void
    {
        $this->publicUrl = $publicUrl;
    }

    /**
     * @return int
     */
    public function getSuspendedTimestamp(): int
    {
        return $this->suspendedTimestamp;
    }

    /**
     * @param int $suspendedTimestamp
     */
    public function setSuspendedTimestamp(int $suspendedTimestamp): void
    {
        $this->suspendedTimestamp = $suspendedTimestamp;
    }


    /**
     * @return \DateTime
     */
    public function getDateAdded(): \DateTime
    {
        return $this->dateAdded;
    }

    /**
     * @param \DateTime $dateAdded
     */
    public function setDateAdded(\DateTime $dateAdded): void
    {
        $this->dateAdded = $dateAdded;
    }

    /**
     * @return string
     */
    public function getSubscriptionStatus(): string
    {
        return $this->subscriptionStatus;
    }

    /**
     * @param string $subscriptionStatus
     */
    public function setSubscriptionStatus(string $subscriptionStatus): void
    {
        $this->subscriptionStatus = $subscriptionStatus;
    }

    /**
     * @return string
     */
    public function getNeighborhood(): string
    {
        return $this->neighborhood;
    }

    /**
     * @param string $neighborhood
     */
    public function setNeighborhood(string $neighborhood): void
    {
        $this->neighborhood = $neighborhood;
    }


    /**
     * @return string
     */
    public function getControlPanelUrl(): string
    {
        return $this->controlPanelUrl;
    }

    /**
     * @param string $controlPanelUrl
     */
    public function setControlPanelUrl(string $controlPanelUrl): void
    {
        $this->controlPanelUrl = $controlPanelUrl;
    }


    /**
     * @return string
     */
    public function getPublicDomain(): string
    {
        return $this->publicDomain;
    }

    /**
     * @param string $publicDomain
     */
    public function setPublicDomain(string $publicDomain): void
    {
        $this->publicDomain = $publicDomain;
    }

    /**
     * @return string
     */
    public function getSubscriptionId(): string
    {
        return $this->subscriptionId;
    }

    /**
     * @param string $subscriptionId
     */
    public function setSubscriptionId(string $subscriptionId): void
    {
        $this->subscriptionId = $subscriptionId;
    }

    /**
     * @param string $handle
     */
    public function setHandle(string $handle): void
    {
        $this->handle = $handle;
    }

    /**
     * @return string
     */
    public function getHandle(): string
    {
        return $this->handle;
    }

    /**
     * @return string
     */
    public function getConcreteAdminPassword(): string
    {
        return $this->concreteAdminPassword;
    }

    /**
     * @param string $concreteAdminPassword
     */
    public function setConcreteAdminPassword(string $concreteAdminPassword): void
    {
        $this->concreteAdminPassword = $concreteAdminPassword;
    }

    /**
     * @return int
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * @param int $status
     */
    public function setStatus(int $status): void
    {
        $this->status = $status;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getSubscription(): ?Subscription
    {
        /**
         * @var $stripe Stripe
         */
        if ($this->subscriptionId) {
            $stripe = app(StripeClient::class);
            return $stripe->subscriptions->retrieve(
                $this->subscriptionId,
                ['expand' => ['customer','latest_invoice']]
            );
        }
        return null;
    }

    public function getUpcomingInvoice(): ?Invoice
    {
        /**
         * @var $stripe Stripe
         */
        if ($this->subscriptionId) {
            $stripe = app(StripeClient::class);
            return $stripe->invoices->upcoming(
                ['subscription' => $this->subscriptionId]
            );
        }
        return null;
    }


    /**
     * Returns a nicely formatted badge representing the site's status in the system. This is fuzzy - it might
     * use the stripe subscription status to popuplate it's value (e.g. "Trial"), or it might use our own internal
     * status for something. It doesn't cleanly map to our internal status OR the stripe status. And that's fine.
     *
     * @return Element
     */
    public function getStatusBadge(): Element
    {
        $badge = new Element('span', '', ['class' => 'badge badge-info']);
        if ($this->getStatus() === self::STATUS_INSTALLING) {
            $badge->setValue('Installing...');
        } else if ($this->getStatus() === self::STATUS_TRIAL_SUSPENDED) {
            $badge->class('badge badge-danger')->setValue('Cancelled');
        } else {
            if ($this->getStatus() === self::STATUS_ACTIVE) {
                if ($this->getSubscriptionStatus() == self::SUBSCRIPTION_STATUS_TRIALING) {
                    $badge->class('badge badge-warning');
                    $badge->setValue('Trial');
                }
            }
        }
        return $badge;
    }

    public function jsonSerialize()
    {
        return [
            'id' => $this->id,
            'handle' => $this->handle,
            'name' => $this->name,
            'status' => $this->status,
            'publicDomain' => $this->publicDomain,
            'publicUrl' => $this->publicUrl,
            'controlPanelUrl' => $this->controlPanelUrl,
            'password' => $this->concreteAdminPassword,
        ];
    }
}
